"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createOrderBy = exports.getLimitOffset = exports.createWhere = void 0;
var mysql_1 = __importDefault(require("mysql"));
var createWhere = function (objects) {
    var where = _createWhere(objects);
    return where === '' ? '' : "WHERE " + where;
};
exports.createWhere = createWhere;
var getLimitOffset = function (limit, offset) {
    return offset == null
        ? "" + (limit == null ? '' : "LIMIT " + limit)
        : "LIMIT " + offset + "," + limit;
};
exports.getLimitOffset = getLimitOffset;
var _createWhere = function (objects, conditionKey) {
    var where;
    if (Array.isArray(objects))
        where = createArrayWhere(objects, conditionKey);
    else
        where = createObjectWhere(objects, conditionKey);
    return where;
};
var createObjectWhere = function (objects, conditionKey) {
    var where = '';
    for (var _i = 0, _a = Object.entries(objects); _i < _a.length; _i++) {
        var _b = _a[_i], key = _b[0], value = _b[1];
        if (key === '_or' || key === '_and')
            where +=
                where === ''
                    ? _createWhere(value, key)
                    : " and " + _createWhere(value, key);
        else
            where +=
                where === ''
                    ? mysql_1.default.escapeId(key) + "=" + mysql_1.default.escape(value)
                    : " " + ((conditionKey === null || conditionKey === void 0 ? void 0 : conditionKey.replace('_', '')) || 'and') + " " + mysql_1.default.escapeId(key) + "=" + mysql_1.default.escape(value);
    }
    return "(" + where + ")";
};
var createArrayWhere = function (objects, conditionKey) {
    var where = '';
    for (var _i = 0, objects_1 = objects; _i < objects_1.length; _i++) {
        var object = objects_1[_i];
        where +=
            where === ''
                ? advenedCondition(object)
                : " " + ((conditionKey === null || conditionKey === void 0 ? void 0 : conditionKey.replace('_', '')) || 'and') + " " + advenedCondition(object);
    }
    return "(" + where + ")";
};
var advenedCondition = function (object) {
    switch (object.conditionType) {
        case 'eq':
            return mysql_1.default.escapeId(object.key) + " = " + mysql_1.default.escape(object.value);
        case 'not_eq':
            return mysql_1.default.escapeId(object.key) + " != " + mysql_1.default.escape(object.value);
        case 'in':
            var inValue = '';
            if (Array.isArray(object.value))
                for (var _i = 0, _a = object.value; _i < _a.length; _i++) {
                    var value = _a[_i];
                    inValue +=
                        inValue == '' ? mysql_1.default.escape(value) : "," + mysql_1.default.escape(value);
                }
            else
                inValue = mysql_1.default.escape(object.value);
            return mysql_1.default.escapeId(object.key) + " IN (" + inValue + ")";
        case 'like':
            return mysql_1.default.escapeId(object.key) + " LIKE " + mysql_1.default.escape(object.value);
        case 'gt':
            return mysql_1.default.escapeId(object.key) + " > " + mysql_1.default.escape(object.value);
        case 'gte':
            return mysql_1.default.escapeId(object.key) + " >= " + mysql_1.default.escape(object.value);
        case 'lt':
            return mysql_1.default.escapeId(object.key) + " < " + mysql_1.default.escape(object.value);
        case 'lte':
            return mysql_1.default.escapeId(object.key) + " <= " + mysql_1.default.escape(object.value);
        case 'is':
            return mysql_1.default.escapeId(object.key) + " IS " + mysql_1.default.escape(object.value);
        case 'not_is':
            return mysql_1.default.escapeId(object.key) + " IS NOT " + mysql_1.default.escape(object.value);
        default:
            return '';
    }
};
var createOrderBy = function (objects, isRandom) {
    var orderBy = [];
    if (isRandom)
        orderBy.push('RAND()');
    if (Array.isArray(objects))
        for (var _i = 0, objects_2 = objects; _i < objects_2.length; _i++) {
            var object = objects_2[_i];
            orderBy.push(object.field + " " + object.ranking);
        }
    else
        orderBy.push(objects.field + " " + objects.ranking);
    return orderBy.length > 0 ? "ORDER BY " + orderBy.toString() : '';
};
exports.createOrderBy = createOrderBy;
//# sourceMappingURL=queryUtils.js.map